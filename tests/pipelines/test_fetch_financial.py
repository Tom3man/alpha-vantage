from unittest.mock import MagicMock

import pandas as pd
import pytest

from alpha_vantage.pipelines import FinancialDataFetcher

EXPECTED_COLUMNS = [
    'FISCAL_DATE_ENDING', 'TICKER', 'TOTAL_ASSETS', 'TOTAL_CURRENT_ASSETS',
    'CASH_AND_CASH_EQUIVALENTS_AT_CARRYING_VALUE', 'CASH_AND_SHORT_TERM_INVESTMENTS', 'INVENTORY',
    'CURRENT_NET_RECEIVABLES', 'TOTAL_NON_CURRENT_ASSETS', 'PROPERTY_PLANT_EQUIPMENT',
    'ACCUMULATED_DEPRECIATION_AMORTIZATION_P_P_E', 'INTANGIBLE_ASSETS',
    'INTANGIBLE_ASSETS_EXCLUDING_GOODWILL', 'GOODWILL', 'INVESTMENTS', 'LONG_TERM_INVESTMENTS',
    'SHORT_TERM_INVESTMENTS', 'OTHER_CURRENT_ASSETS', 'OTHER_NON_CURRENT_ASSETS', 'TOTAL_LIABILITIES',
    'TOTAL_CURRENT_LIABILITIES', 'CURRENT_ACCOUNTS_PAYABLE', 'DEFERRED_REVENUE', 'CURRENT_DEBT',
    'SHORT_TERM_DEBT', 'TOTAL_NON_CURRENT_LIABILITIES', 'CAPITAL_LEASE_OBLIGATIONS', 'LONG_TERM_DEBT',
    'CURRENT_LONG_TERM_DEBT', 'LONG_TERM_DEBT_NONCURRENT', 'SHORT_LONG_TERM_DEBT_TOTAL',
    'OTHER_CURRENT_LIABILITIES', 'OTHER_NON_CURRENT_LIABILITIES', 'TOTAL_SHAREHOLDER_EQUITY',
    'TREASURY_STOCK', 'RETAINED_EARNINGS', 'COMMON_STOCK', 'COMMON_STOCK_SHARES_OUTSTANDING',
    'GROSS_PROFIT', 'TOTAL_REVENUE', 'COST_OF_REVENUE', 'COSTOF_GOODS_AND_SERVICES_SOLD', 'OPERATING_INCOME',
    'SELLING_GENERAL_AND_ADMINISTRATIVE', 'RESEARCH_AND_DEVELOPMENT', 'OPERATING_EXPENSES',
    'INVESTMENT_INCOME_NET', 'NET_INTEREST_INCOME', 'INTEREST_INCOME', 'INTEREST_EXPENSE',
    'NON_INTEREST_INCOME', 'OTHER_NON_OPERATING_INCOME', 'DEPRECIATION', 'DEPRECIATION_AND_AMORTIZATION',
    'INCOME_BEFORE_TAX', 'INCOME_TAX_EXPENSE', 'INTEREST_AND_DEBT_EXPENSE', 'NET_INCOME_FROM_CONTINUING_OPERATIONS',
    'COMPREHENSIVE_INCOME_NET_OF_TAX', 'EBIT', 'EBITDA', 'NET_INCOME_x', 'OPERATING_CASHFLOW',
    'PAYMENTS_FOR_OPERATING_ACTIVITIES', 'PROCEEDS_FROM_OPERATING_ACTIVITIES', 'CHANGE_IN_OPERATING_LIABILITIES',
    'CHANGE_IN_OPERATING_ASSETS', 'DEPRECIATION_DEPLETION_AND_AMORTIZATION', 'CAPITAL_EXPENDITURES',
    'CHANGE_IN_RECEIVABLES', 'CHANGE_IN_INVENTORY', 'PROFIT_LOSS', 'CASHFLOW_FROM_INVESTMENT',
    'CASHFLOW_FROM_FINANCING', 'PROCEEDS_FROM_REPAYMENTS_OF_SHORT_TERM_DEBT',
    'PAYMENTS_FOR_REPURCHASE_OF_COMMON_STOCK', 'PAYMENTS_FOR_REPURCHASE_OF_EQUITY',
    'PAYMENTS_FOR_REPURCHASE_OF_PREFERRED_STOCK', 'DIVIDEND_PAYOUT', 'DIVIDEND_PAYOUT_COMMON_STOCK',
    'DIVIDEND_PAYOUT_PREFERRED_STOCK', 'PROCEEDS_FROM_ISSUANCE_OF_COMMON_STOCK',
    'PROCEEDS_FROM_ISSUANCE_OF_LONG_TERM_DEBT_AND_CAPITAL_SECURITIES_NET',
    'PROCEEDS_FROM_ISSUANCE_OF_PREFERRED_STOCK', 'PROCEEDS_FROM_REPURCHASE_OF_EQUITY',
    'PROCEEDS_FROM_SALE_OF_TREASURY_STOCK', 'CHANGE_IN_CASH_AND_CASH_EQUIVALENTS', 'CHANGE_IN_EXCHANGE_RATE',
    'NET_INCOME_y', 'REPORTED_DATE', 'REPORTED_E_P_S', 'ESTIMATED_E_P_S',
    'SURPRISE', 'SURPRISE_PERCENTAGE', 'REPORT_TIME'
]


@pytest.fixture(scope="module")
def setup_dataframe():
    # Create an instance of the data fetcher
    financial_data = FinancialDataFetcher()

    mock_data = {col: [1] if col != 'TICKER' else ['IBM'] for col in EXPECTED_COLUMNS}
    mocked_df = pd.DataFrame(mock_data)

    # Mock the method to return this DataFrame
    financial_data.build_quarterly_fundamental_data = MagicMock(return_value=mocked_df)

    # Use the mocked method to generate a DataFrame
    df = financial_data.build_quarterly_fundamental_data(ticker='IBM')
    return df


def test_columns_exist(setup_dataframe):

    for col in EXPECTED_COLUMNS:
        assert col in setup_dataframe.columns, f"DataFrame is missing '{col}' column"


def test_dataframe_length(setup_dataframe):
    assert len(setup_dataframe) > 0, "DataFrame should not be empty"
